# -*- mode: ruby -*-
# vi: set ft=ruby :

custom_vars = YAML.load_file("./custom.yaml")
WD = custom_vars["wheredir"]
global_vars = YAML.load_file("#{WD}config/global.yaml")
secret_vars = YAML.load_file("#{WD}config/secret.yaml")
lab_vars = YAML.load_file("#{WD}config/lab/suma.yaml")
LABNAME = lab_vars["labname"]
lab_vars["requiredsecrets"].each do |code|
  if (secret_vars[code.downcase].empty?)
    abort("Required #{code.downcase} variable has not been filled out in the config/secret.yaml file.")
  end
end

Vagrant.configure("2") do |config|    
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provider :libvirt do |libvirt, override|
    libvirt.cpus = custom_vars["libvirt"]["cpus"]
    libvirt.memory = custom_vars["libvirt"]["memory"]
    libvirt.machine_virtual_size = custom_vars["libvirt"]["machine_virtual_size"]
  end

  config.trigger.before :destroy do |trigger|
    trigger.name = "unregister"
    trigger.info = "unregister client"
    trigger.on_error = :continue
    trigger.only_on = lab_vars["suseconnect-d"]
    trigger.run_remote = {inline: <<-SHELL
      echo "nameserver #{custom_vars["network"]["nameserver"]}" >>/etc/resolv.conf
      if [[ $( SUSEConnect --status | python -c "import sys, json; print(json.load(sys.stdin)[0]['status'])" ) == "Registered" ]];
      then
        SUSEConnect -d;
      fi
    SHELL
    }
  end 

  machine_list = lab_vars["machines"][custom_vars["deployment"]]

  #client_products = []
  #
  # Add any machine yaml file suma-client-product values 
  #machine_list.each do |machine|
  #  file_path = "#{WD}config/machines/#{LABNAME}/#{machine}.yaml"
  #  
  #  if File.exists?(file_path)
  #    yaml_content = YAML.load_file(file_path)
  #  
  #    if yaml_content.key?('suma-client-product')
  #      client_products << yaml_content['suma-client-product']
  #    end
  #  end
  #end

  machine_list.each do |machine|
    machine_vars = YAML.safe_load(File.read("#{WD}config/machines/#{LABNAME}/#{machine}.yaml"))  ### Loads all of the machine_vars, secret_vars, and custom_vars values for use in provisioning.
    env_vars = {}
    [machine_vars, secret_vars, custom_vars].each do |vars|
      vars.each do |k, v|
        env_var_name = k.to_s.upcase
        env_var_value = v
        if env_var_value.nil?
          raise "Could not find a value for #{k}"
        end  
        env_vars[env_var_name] = env_var_value
      end
    end 

    # Variables that interact with the other yaml files. 
    # Also include them as variables for provisioning scripts below.
    ipaddress = "#{custom_vars["network"][machine_vars["subnet"]]}#{machine_vars["ipaddress"]}"
    env_vars["IPADDRESS"] = ipaddress

    subnet = "#{custom_vars["network"][machine_vars["subnet"]]}"
    env_vars["SUBNET"] = subnet

    #env_vars["CLIENTPRODUCTS"] = client_products

    ## Vagrant Machine Portion
    config.vm.define machine_vars["short"] do |node|
      node.vm.box = global_vars["box"][machine_vars["box"]]
      node.vm.box_url = global_vars["boxurl"][machine_vars["box"]]
      node.vm.hostname = machine_vars["fqdn"]
      node.vm.network "private_network", ip: ipaddress, hostname: true
      node.vm.provider :libvirt do |libvirt, override|
        libvirt.cpus = machine_vars["cpus"]
        libvirt.memory = machine_vars["memory"]
        libvirt.storage :file, :size => machine_vars["datadisk"], :type => 'qcow2'
      end
      if machine_vars["public"] == "true"
        node.vm.network "public_network", dev: custom_vars["network"]["bridgename"], mode: "bridge", type: "bridge"
      end
      Dir.glob("#{WD}provisioners/lab/#{LABNAME}/#{machine_vars["files"]}/*") do |file|
        node.vm.provision "file", source: file, destination: "/tmp/#{File.basename(file)}"
      end
      node.vm.provision "shell" do |s|   
        s.path = "#{WD}provisioners/lab/#{LABNAME}/#{machine_vars["provisioning"]}"
        s.env = env_vars
        #puts "s.env: #{s.env}" # For s.env debugging.
      end  
    end
  end
end 
