# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  unless File.exist?("./custom.yaml")
    abort("Required ./custom.yaml file does not exist. Consult vagrantfiles/custom.yaml for reference.")
  end
  custom_vars = YAML.load_file("./custom.yaml")
  WD = custom_vars["wheredir"]
  global_vars = YAML.load_file("#{WD}config/global.yaml")
  if File.exist?("./secret.yaml")
    secret_vars = YAML.load_file("./secret.yaml")
  elsif File.exist?("#{WD}config/secret.yaml")
    secret_vars = YAML.load_file("#{WD}config/secret.yaml")
  else
    abort("The required ./secret.yaml or #{WD}config/secret.yaml file does not exist. Consult #{WD}config/secret_example.yaml for reference.")
  end
  lab_vars = YAML.load_file("#{WD}config/lab/basic.yaml")
  LABNAME = lab_vars["labname"]
  lab_vars["requiredsecrets"].each do |code|
    if (secret_vars[code.downcase].empty?)
      abort("Required #{code.downcase} variable has not been filled out in the secret.yaml file.")
    end
  end
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provider :libvirt do |libvirt, override|
    libvirt.cpus = custom_vars["libvirt"]["cpus"]
    libvirt.memory = custom_vars["libvirt"]["memory"]
    libvirt.machine_virtual_size = custom_vars["libvirt"]["machine_virtual_size"]
  end

  config.trigger.before :destroy do |trigger|
    trigger.name = "unregister"
    trigger.info = "unregister client"
    trigger.on_error = :continue
    trigger.only_on = lab_vars["suseconnect-d"]
    trigger.run_remote = {inline: <<-SHELL
      echo "nameserver #{custom_vars["network"]["nameserver"]}" >>/etc/resolv.conf
      if [[ $( SUSEConnect --status | python3 -c "import sys, json; print(json.load(sys.stdin)[0]['status'])" ) == "Registered" ]];
      then
        if grep -i micro /etc/*release >/dev/null 2>&1; then
          transactional-update register -d 2>/dev/null
        else
          SUSEConnect -d;
        fi
      fi
    SHELL
    }
  end

  # SLE 12 SP5 Server
  config.vm.define "#{LABNAME}12sp5" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}12sp5.yaml")
    sle.vm.box = global_vars["box"]["sle12sp5"]
    sle.vm.box_url = global_vars["boxurl"]["sle12sp5"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE12"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  config.vm.define "#{LABNAME}12sp4" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}12sp4.yaml")
    sle.vm.box = global_vars["box"]["sle12sp4"]
    # This json file currently has a bug where you need to run the following command after the first failure (when it's pulled the box and files down):
    # sed -i 's/"42"/42/g' ~/.vagrant.d/boxes/SLES-12-SP4-Vagrant.x86_64/12.4.2.2/libvirt/metadata.json
    # If the vagrant box name or version number has been changed, those will have to be adjusted
    sle.vm.box_url = global_vars["boxurl"]["sle12sp4"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE12"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE Micro 5.5 Server
  config.vm.define "#{LABNAME}micro5" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}micro5.yaml")
    sle.vm.box = global_vars["box"]["micro5"]
    sle.vm.box_url = global_vars["boxurl"]["micro5"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", type: "dhcp", auto_config: false
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "MICRO5"
      s.env = {
        "MICROREGCODE" => secret_vars["microregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE 15 SP6 Server
  config.vm.define "#{LABNAME}15sp6" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}15sp6.yaml")
    sle.vm.box = global_vars["box"]["sle15sp6"]
    sle.vm.box_url = global_vars["boxurl"]["sle15sp6"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE15"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE 15 SP5 Server
  config.vm.define "#{LABNAME}15sp5" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}15sp5.yaml")
    sle.vm.box = global_vars["box"]["sle15sp5"]
    sle.vm.box_url = global_vars["boxurl"]["sle15sp5"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE15"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE 15 SP4 Server
  config.vm.define "#{LABNAME}15sp4" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}15sp4.yaml")
    sle.vm.box = global_vars["box"]["sle15sp4"]
    sle.vm.box_url = global_vars["boxurl"]["sle15sp4"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE15"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE 15 SP3 Server
  config.vm.define "#{LABNAME}15sp3" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}15sp3.yaml")
    sle.vm.box = global_vars["box"]["sle15sp3"]
    sle.vm.box_url = global_vars["boxurl"]["sle15sp3"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE15"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE 15 SP2 Server
  config.vm.define "#{LABNAME}15sp2" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}15sp2.yaml")
    sle.vm.box = global_vars["box"]["sle15sp2"]
    sle.vm.box_url = global_vars["boxurl"]["sle15sp2"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE15"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # SLE 15 SP1 Server
  config.vm.define "#{LABNAME}15sp1" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}15sp1.yaml")
    sle.vm.box = global_vars["box"]["sle15sp1"]
    sle.vm.box_url = global_vars["boxurl"]["sle15sp1"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "SLE15"
      s.env = {
        "SLEREGCODE" => secret_vars["sleregcode"],
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end
  
  # OpenSUSE Leap 15 Server
  config.vm.define "#{LABNAME}leap15" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}leap15.yaml")
    sle.vm.box = global_vars["box"]["leap15"]
    sle.vm.box_url = global_vars["boxurl"]["leap15"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "LEAP15"
      s.env = {
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end
  
  # OpenSUSE Leap 42 Server
  config.vm.define "#{LABNAME}leap42" do |sle|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}leap42.yaml")
    sle.vm.box = global_vars["box"]["leap42"]
    sle.vm.box_url = global_vars["boxurl"]["leap42"]
    sle.vm.hostname = machine_vars["fqdn"]
    sle.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    sle.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "LEAP42"
      s.env = {
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end
  
  # RHEL 8
  config.vm.define "#{LABNAME}rhel8", autostart: custom_vars["extra"] do |rhe|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}rhel8.yaml")
    rhe.vm.box = global_vars["box"]["rhel8"]
    rhe.vm.box_url = global_vars["boxurl"]["rhel8"]
    rhe.vm.hostname = machine_vars["fqdn"]
    rhe.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    rhe.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "RHE8"
      s.env = {
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

  # Liberty 9
  config.vm.define "#{LABNAME}liberty9", autostart: custom_vars["extra"] do |rhe|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}liberty9.yaml")
    rhe.vm.box = global_vars["box"]["rhel9"]
    rhe.vm.box_url = global_vars["boxurl"]["rhel9"]
    rhe.vm.hostname = machine_vars["fqdn"]
    rhe.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    rhe.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "RHE8"
      s.env = {
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

# OEL 8
  config.vm.define "#{LABNAME}oel8", autostart: custom_vars["extra"] do |rhe|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}oel8.yaml")
    rhe.vm.box = global_vars["box"]["oel8"]
    rhe.vm.box_url = global_vars["boxurl"]["oel8"]
    rhe.vm.hostname = machine_vars["fqdn"]
    rhe.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    rhe.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "OE8"
      s.env = {
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end

# OEL 6
  config.vm.define "#{LABNAME}oel6", autostart: custom_vars["extra"] do |rhe|
    machine_vars = YAML.load_file("#{WD}config/machines/#{LABNAME}/#{LABNAME}oel6.yaml")
    rhe.vm.box = global_vars["box"]["oel6"]
    rhe.vm.box_url = global_vars["boxurl"]["oel6"]
    rhe.vm.hostname = machine_vars["fqdn"]
    rhe.vm.network "private_network", ip: "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}", hostname: true
    rhe.vm.provision "shell" do |s|
      s.path = "#{WD}provisioners/common/bootstrap.sh"
      s.args = "OE6"
      s.env = {
        "IPADDRESS" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ipaddress"]}",
        "FQDN" => machine_vars["fqdn"],
        "SHORT" => machine_vars["short"],
        "SUBNET" => custom_vars["network"]["primarysubnet"],
        "NTPSERVER" => "#{custom_vars["network"]["primarysubnet"]}#{machine_vars["ntpserver"]}"
      }
    end
  end
end
